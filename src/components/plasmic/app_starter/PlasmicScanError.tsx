// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sKQ28BLFUJrwEqPEuPR1D8
// Component: eDu9hyC-q-lK

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: gbLIUkABup4F/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: sKQ28BLFUJrwEqPEuPR1D8/projectcss
import sty from "./PlasmicScanError.module.css"; // plasmic-import: eDu9hyC-q-lK/css

createPlasmicElementProxy;

export type PlasmicScanError__VariantMembers = {};
export type PlasmicScanError__VariantsArgs = {};
type VariantPropType = keyof PlasmicScanError__VariantsArgs;
export const PlasmicScanError__VariantProps = new Array<VariantPropType>();

export type PlasmicScanError__ArgsType = {};
type ArgPropType = keyof PlasmicScanError__ArgsType;
export const PlasmicScanError__ArgProps = new Array<ArgPropType>();

export type PlasmicScanError__OverridesType = {
  root?: p.Flex<"div">;
  pageLayout?: p.Flex<typeof PageLayout>;
  freeBox?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  span?: p.Flex<"span">;
  button?: p.Flex<typeof AntdButton>;
  text?: p.Flex<"div">;
};

export interface DefaultScanErrorProps {
  className?: string;
}

const $$ = {};

function PlasmicScanError__RenderFunc(props: {
  variants: PlasmicScanError__VariantsArgs;
  args: PlasmicScanError__ArgsType;
  overrides: PlasmicScanError__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "scannerState",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Error \ud83d\udd34"
      },
      {
        path: "pageLayout.scannerstatus",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Ready \ud83d\udfe2"
      },
      {
        path: "pageLayout.user",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "GRAPE, GREG"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "rp2KGdrnivkunXp7r598rC",
        opId: "ee6ef4c9-1a9b-4d21-bb49-b6925d573644",
        userArgs: {
          filters: [$ctx.params.scanid]
        },
        cacheKey: `plasmic.$.ee6ef4c9-1a9b-4d21-bb49-b6925d573644.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
          onLoadStart={async event => {
            const $steps = {};

            $steps["updateScannerState"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["scannerState"]
                    },
                    operation: 0,
                    value: "Eror ðŸ”´"
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    p.set(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateScannerState"] != null &&
              typeof $steps["updateScannerState"] === "object" &&
              typeof $steps["updateScannerState"].then === "function"
            ) {
              $steps["updateScannerState"] = await $steps["updateScannerState"];
            }
          }}
          onLoadedData={async event => {
            const $steps = {};

            $steps["updateScannerState"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["scannerState"]
                    },
                    operation: 0,
                    value: "Error ðŸ”´"
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    p.set(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateScannerState"] != null &&
              typeof $steps["updateScannerState"] === "object" &&
              typeof $steps["updateScannerState"].then === "function"
            ) {
              $steps["updateScannerState"] = await $steps["updateScannerState"];
            }
          }}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            onScannerstatusChange={p.generateStateOnChangeProp($state, [
              "pageLayout",
              "scannerstatus"
            ])}
            onUserChange={p.generateStateOnChangeProp($state, [
              "pageLayout",
              "user"
            ])}
            scannerstatus={p.generateStateValueProp($state, [
              "pageLayout",
              "scannerstatus"
            ])}
            user={p.generateStateValueProp($state, ["pageLayout", "user"])}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Error"}
                  </h1>
                  <span
                    data-plasmic-name={"span"}
                    data-plasmic-override={overrides.span}
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      sty.span
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            "Scan " +
                            $queries.query.data[0].scanid +
                            " Failed with error code E012. \n Manual abort - app"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </span>
                  <AntdButton
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["airtableUpdateById"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "rp2KGdrnivkunXp7r598rC",
                                opId: "c51b7c1c-3b39-483e-868a-408a170baf94",
                                userArgs: {
                                  id: [$queries.query.data[0].__airtable_id]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["airtableUpdateById"] != null &&
                        typeof $steps["airtableUpdateById"] === "object" &&
                        typeof $steps["airtableUpdateById"].then === "function"
                      ) {
                        $steps["airtableUpdateById"] = await $steps[
                          "airtableUpdateById"
                        ];
                      }

                      $steps["goToPatientlist"] = true
                        ? (() => {
                            const actionArgs = { destination: `/patientlist` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPatientlist"] != null &&
                        typeof $steps["goToPatientlist"] === "object" &&
                        typeof $steps["goToPatientlist"].then === "function"
                      ) {
                        $steps["goToPatientlist"] = await $steps[
                          "goToPatientlist"
                        ];
                      }
                    }}
                    type={"primary"}
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"Return to patient list"}
                    </div>
                  </AntdButton>
                </p.Stack>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "freeBox", "h1", "span", "button", "text"],
  pageLayout: ["pageLayout", "freeBox", "h1", "span", "button", "text"],
  freeBox: ["freeBox", "h1", "span", "button", "text"],
  h1: ["h1"],
  span: ["span"],
  button: ["button", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  freeBox: "div";
  h1: "h1";
  span: "span";
  button: typeof AntdButton;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicScanError__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicScanError__VariantsArgs;
    args?: PlasmicScanError__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicScanError__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicScanError__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicScanError__ArgProps,
          internalVariantPropNames: PlasmicScanError__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicScanError__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicScanError";
  } else {
    func.displayName = `PlasmicScanError.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"sKQ28BLFUJrwEqPEuPR1D8"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sKQ28BLFUJrwEqPEuPR1D8"
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicScanError = Object.assign(
  // Top-level PlasmicScanError renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    span: makeNodeComponent("span"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicScanError
    internalVariantProps: PlasmicScanError__VariantProps,
    internalArgProps: PlasmicScanError__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicScanError;
/* prettier-ignore-end */
