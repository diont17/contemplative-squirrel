// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sKQ28BLFUJrwEqPEuPR1D8
// Component: Prpkmkp4aDeA

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: gbLIUkABup4F/component
import { RichDetails } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-details";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: sKQ28BLFUJrwEqPEuPR1D8/projectcss
import sty from "./PlasmicNewscan.module.css"; // plasmic-import: Prpkmkp4aDeA/css

createPlasmicElementProxy;

export type PlasmicNewscan__VariantMembers = {};
export type PlasmicNewscan__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewscan__VariantsArgs;
export const PlasmicNewscan__VariantProps = new Array<VariantPropType>();

export type PlasmicNewscan__ArgsType = {};
type ArgPropType = keyof PlasmicNewscan__ArgsType;
export const PlasmicNewscan__ArgProps = new Array<ArgPropType>();

export type PlasmicNewscan__OverridesType = {
  root?: p.Flex<"div">;
  pageLayout?: p.Flex<typeof PageLayout>;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  dataDetails?: p.Flex<typeof RichDetails>;
  scannerDetails?: p.Flex<typeof Embed>;
  table?: p.Flex<typeof RichTable>;
  checkbox?: p.Flex<typeof AntdCheckbox>;
  checkbox2?: p.Flex<typeof AntdCheckbox>;
  checkbox3?: p.Flex<typeof AntdCheckbox>;
};

export interface DefaultNewscanProps {
  className?: string;
}

const $$ = {};

function PlasmicNewscan__RenderFunc(props: {
  variants: PlasmicNewscan__VariantsArgs;
  args: PlasmicNewscan__ArgsType;
  overrides: PlasmicNewscan__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "stroke",

        onMutate: p.generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec(
          "selectedRowKeys",
          RichTable_Helpers
        )
      },
      {
        path: "checkbox.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "checkbox2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "checkbox3.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "pageLayout.scannerstatus",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Ready \ud83d\udfe2"
      },
      {
        path: "pageLayout.user",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "GRAPE, GREG"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    patient: usePlasmicDataOp(() => {
      return {
        sourceId: "rp2KGdrnivkunXp7r598rC",
        opId: "2b0f447d-0cd6-41a9-b2ba-aca71b433db8",
        userArgs: {
          filters: [$ctx.params.patientid]
        },
        cacheKey: `plasmic.$.2b0f447d-0cd6-41a9-b2ba-aca71b433db8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    protocol: usePlasmicDataOp(() => {
      return {
        sourceId: "rp2KGdrnivkunXp7r598rC",
        opId: "3055d272-deab-4a54-b9b3-ba57199d2edc",
        userArgs: {},
        cacheKey: `plasmic.$.3055d272-deab-4a54-b9b3-ba57199d2edc.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            onScannerstatusChange={p.generateStateOnChangeProp($state, [
              "pageLayout",
              "scannerstatus"
            ])}
            onUserChange={p.generateStateOnChangeProp($state, [
              "pageLayout",
              "user"
            ])}
            scannerstatus={p.generateStateValueProp($state, [
              "pageLayout",
              "scannerstatus"
            ])}
            user={p.generateStateValueProp($state, ["pageLayout", "user"])}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Setup scan"}
                    </h1>
                  </section>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__ilnYo
                    )}
                  >
                    {"Patient:"}
                  </h4>
                  <RichDetails
                    data-plasmic-name={"dataDetails"}
                    data-plasmic-override={overrides.dataDetails}
                    bordered={true}
                    className={classNames("__wab_instance", sty.dataDetails)}
                    data={(() => {
                      try {
                        return $queries.patient;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    fields={(() => {
                      const __composite = [
                        {
                          key: "__airtable_id",
                          fieldId: "__airtable_id",
                          isHidden: null
                        },
                        {
                          key: "patientid",
                          fieldId: "patientid",
                          isHidden: null
                        },
                        { key: "Surname", fieldId: "Surname" },
                        { key: "Firstname", fieldId: "Firstname", title: null },
                        {
                          key: "healthsystemid",
                          fieldId: "healthsystemid",
                          title: null
                        },
                        {
                          key: "DOB",
                          fieldId: "DOB",
                          dataType: null,
                          timeStyle: null
                        },
                        { key: "Scans 2", fieldId: "Scans 2", isHidden: null },
                        { key: "addedby", fieldId: "addedby", isHidden: null },
                        {
                          key: "Surname (from addedby)",
                          fieldId: "Surname (from addedby)",
                          isHidden: null
                        }
                      ];
                      __composite["0"]["isHidden"] = true;
                      __composite["1"]["isHidden"] = true;
                      __composite["3"]["title"] = "First name";
                      __composite["4"]["title"] = "NHI";
                      __composite["5"]["dataType"] = "datetime";
                      __composite["5"]["timeStyle"] = "none";
                      __composite["6"]["isHidden"] = true;
                      __composite["7"]["isHidden"] = true;
                      __composite["8"]["isHidden"] = true;
                      return __composite;
                    })()}
                    size={"small"}
                  />

                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__dReyn
                    )}
                  >
                    {"Scanner:"}
                  </h4>
                  <Embed
                    data-plasmic-name={"scannerDetails"}
                    data-plasmic-override={overrides.scannerDetails}
                    className={classNames("__wab_instance", sty.scannerDetails)}
                    code={
                      '<table>\r\n    <tbody>\r\n        <tr class="ant-descriptions-row">\r\n            <th class="ant-descriptions-item-label" colspan="1" style="width: 25%;"><span>Device</span></th>\r\n            <td class="ant-descriptions-item-content" colspan="1" style="width: 30%;"><span>Axana 001</span></td>\r\n             <th class="ant-descriptions-item-label" colspan="1" style="width: 25%;"><span>Scanner version</span></th>\r\n            <td class="ant-descriptions-item-content" colspan="1" style="width: 35%;"><span>1.03</span></td>\r\n\r\n        </tr>\r\n            \r\n        <tr class="ant-descriptions-row">\r\n            <th class="ant-descriptions-item-label" colspan="1" style="width: 25%;"><span>Calibration</span></th>\r\n            <td class="ant-descriptions-item-content" colspan="1" style="width: 30%;"><span>20231003C12</span></td>\r\n            <th class="ant-descriptions-item-label" colspan="1" style="width: 25%;"><span>Calibration time</span></th>\r\n            <td class="ant-descriptions-item-content" colspan="1" style="width: 35%;text-align:right;"><span>10 OCT 2023 07:23</span></td>\r\n\r\n        </tr>\r\n    </tbody>\r\n</table>'
                    }
                  />

                  {(() => {
                    const child$Props = {
                      canSelectRows: "click",
                      className: classNames("__wab_instance", sty.table),
                      data: (() => {
                        try {
                          return $queries.protocol;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      fields: (() => {
                        const __composite = [
                          {
                            key: "__airtable_id",
                            fieldId: "__airtable_id",
                            isHidden: null
                          },
                          { key: "Name", fieldId: "Name", title: null },
                          {
                            key: "scantime",
                            fieldId: "scantime",
                            title: null,
                            dataType: null,
                            maximumFractionDigits: null
                          },
                          { key: "Select", fieldId: "Select", isHidden: null },
                          { key: "value", fieldId: "value", isHidden: null }
                        ];
                        __composite["0"]["isHidden"] = true;
                        __composite["1"]["title"] = "Protocol";
                        __composite["2"]["title"] = "Estimated scan time (min)";
                        __composite["2"]["dataType"] = "number";
                        __composite["2"]["maximumFractionDigits"] = 0;
                        __composite["3"]["isHidden"] = true;
                        __composite["4"]["isHidden"] = true;
                        return __composite;
                      })(),
                      hideColumnPicker: true,
                      hideExports: true,
                      hideSearch: true,
                      onRowClick: async (rowKey, row, event) => {
                        const $steps = {};
                      },
                      onRowSelectionChanged: async (...eventArgs: any) => {
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKey",
                          ["table", "selectedRowKey"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRow",
                          ["table", "selectedRow"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRows",
                          ["table", "selectedRows"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKeys",
                          ["table", "selectedRowKeys"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                      },
                      pagination: false,
                      rowKey: "value",
                      scopeClassName: sty["table__instance"],
                      selectedRowKey: p.generateStateValueProp($state, [
                        "table",
                        "selectedRowKey"
                      ]),
                      selectedRowKeys: p.generateStateValueProp($state, [
                        "table",
                        "selectedRowKeys"
                      ]),
                      themeResetClassName: classNames(
                        projectcss.root_reset,
                        projectcss.root_reset_tags,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )
                    };
                    p.initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "selectedRowKey",
                          plasmicStateName: "table.selectedRowKey"
                        },
                        {
                          name: "selectedRow",
                          plasmicStateName: "table.selectedRow"
                        },
                        {
                          name: "selectedRows",
                          plasmicStateName: "table.selectedRows"
                        },
                        {
                          name: "selectedRowKeys",
                          plasmicStateName: "table.selectedRowKeys"
                        }
                      ],
                      [],
                      RichTable_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <RichTable
                        data-plasmic-name={"table"}
                        data-plasmic-override={overrides.table}
                        {...child$Props}
                      />
                    );
                  })()}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vyNa)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__geGe9)}
                    >
                      <AntdCheckbox
                        data-plasmic-name={"checkbox"}
                        data-plasmic-override={overrides.checkbox}
                        checked={p.generateStateValueProp($state, [
                          "checkbox",
                          "checked"
                        ])}
                        className={classNames("__wab_instance", sty.checkbox)}
                        defaultChecked={true}
                        onChange={p.generateStateOnChangeProp($state, [
                          "checkbox",
                          "checked"
                        ])}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__t2MU
                          )}
                        >
                          {"Motion detect"}
                        </div>
                      </AntdCheckbox>
                      <AntdCheckbox
                        data-plasmic-name={"checkbox2"}
                        data-plasmic-override={overrides.checkbox2}
                        checked={p.generateStateValueProp($state, [
                          "checkbox2",
                          "checked"
                        ])}
                        className={classNames("__wab_instance", sty.checkbox2)}
                        defaultChecked={true}
                        onChange={p.generateStateOnChangeProp($state, [
                          "checkbox2",
                          "checked"
                        ])}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ahGh5
                          )}
                        >
                          {"Override SNR abort"}
                        </div>
                      </AntdCheckbox>
                      <AntdCheckbox
                        data-plasmic-name={"checkbox3"}
                        data-plasmic-override={overrides.checkbox3}
                        checked={p.generateStateValueProp($state, [
                          "checkbox3",
                          "checked"
                        ])}
                        className={classNames("__wab_instance", sty.checkbox3)}
                        defaultChecked={true}
                        onChange={p.generateStateOnChangeProp($state, [
                          "checkbox3",
                          "checked"
                        ])}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uyd16
                          )}
                        >
                          {"Complete pre-scan"}
                        </div>
                      </AntdCheckbox>
                    </div>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bb0Uy)}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__wNhMh
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["airtableCreate"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "rp2KGdrnivkunXp7r598rC",
                                    opId: "dd2f66b0-0bad-4ee4-a5a3-a3c5acc79c86",
                                    userArgs: {
                                      variables: [
                                        $state.table.selectedRowKey,
                                        $queries.patient.data[0].patientid,
                                        $queries.patient.data[0].Surname
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  },
                                  continueOnError: true
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["airtableCreate"] != null &&
                            typeof $steps["airtableCreate"] === "object" &&
                            typeof $steps["airtableCreate"].then === "function"
                          ) {
                            $steps["airtableCreate"] = await $steps[
                              "airtableCreate"
                            ];
                          }

                          $steps["goToScanning"] = true
                            ? (() => {
                                const actionArgs = { destination: `/scanning` };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    location.assign(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToScanning"] != null &&
                            typeof $steps["goToScanning"] === "object" &&
                            typeof $steps["goToScanning"].then === "function"
                          ) {
                            $steps["goToScanning"] = await $steps[
                              "goToScanning"
                            ];
                          }
                        }}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kpPwl
                          )}
                        >
                          {"Start Scan"}
                        </div>
                      </AntdButton>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__ya6Lk
                        )}
                        onClick={async () => {
                          const $steps = {};

                          $steps["goToPatientdetails"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: `/patients/${(() => {
                                    try {
                                      return $ctx.params.patientid;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    location.assign(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPatientdetails"] != null &&
                            typeof $steps["goToPatientdetails"] === "object" &&
                            typeof $steps["goToPatientdetails"].then ===
                              "function"
                          ) {
                            $steps["goToPatientdetails"] = await $steps[
                              "goToPatientdetails"
                            ];
                          }
                        }}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nxLkp
                          )}
                        >
                          {"Cancel"}
                        </div>
                      </AntdButton>
                    </p.Stack>
                  </div>
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "h1",
    "dataDetails",
    "scannerDetails",
    "table",
    "checkbox",
    "checkbox2",
    "checkbox3"
  ],
  pageLayout: [
    "pageLayout",
    "section",
    "h1",
    "dataDetails",
    "scannerDetails",
    "table",
    "checkbox",
    "checkbox2",
    "checkbox3"
  ],
  section: ["section", "h1"],
  h1: ["h1"],
  dataDetails: ["dataDetails"],
  scannerDetails: ["scannerDetails"],
  table: ["table"],
  checkbox: ["checkbox"],
  checkbox2: ["checkbox2"],
  checkbox3: ["checkbox3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  section: "section";
  h1: "h1";
  dataDetails: typeof RichDetails;
  scannerDetails: typeof Embed;
  table: typeof RichTable;
  checkbox: typeof AntdCheckbox;
  checkbox2: typeof AntdCheckbox;
  checkbox3: typeof AntdCheckbox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewscan__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewscan__VariantsArgs;
    args?: PlasmicNewscan__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewscan__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewscan__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewscan__ArgProps,
          internalVariantPropNames: PlasmicNewscan__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewscan__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewscan";
  } else {
    func.displayName = `PlasmicNewscan.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"sKQ28BLFUJrwEqPEuPR1D8"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sKQ28BLFUJrwEqPEuPR1D8"
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewscan = Object.assign(
  // Top-level PlasmicNewscan renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    dataDetails: makeNodeComponent("dataDetails"),
    scannerDetails: makeNodeComponent("scannerDetails"),
    table: makeNodeComponent("table"),
    checkbox: makeNodeComponent("checkbox"),
    checkbox2: makeNodeComponent("checkbox2"),
    checkbox3: makeNodeComponent("checkbox3"),

    // Metadata about props expected for PlasmicNewscan
    internalVariantProps: PlasmicNewscan__VariantProps,
    internalArgProps: PlasmicNewscan__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewscan;
/* prettier-ignore-end */
