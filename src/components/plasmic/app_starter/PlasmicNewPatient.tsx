// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sKQ28BLFUJrwEqPEuPR1D8
// Component: K4Wu9F6DHPo0

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: gbLIUkABup4F/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: sKQ28BLFUJrwEqPEuPR1D8/projectcss
import sty from "./PlasmicNewPatient.module.css"; // plasmic-import: K4Wu9F6DHPo0/css

createPlasmicElementProxy;

export type PlasmicNewPatient__VariantMembers = {};
export type PlasmicNewPatient__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPatient__VariantsArgs;
export const PlasmicNewPatient__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPatient__ArgsType = {};
type ArgPropType = keyof PlasmicNewPatient__ArgsType;
export const PlasmicNewPatient__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPatient__OverridesType = {
  root?: p.Flex<"div">;
  pageLayout?: p.Flex<typeof PageLayout>;
  freeBox?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  form?: p.Flex<typeof FormWrapper>;
  input?: p.Flex<typeof AntdInput>;
  numberInput?: p.Flex<typeof AntdInputNumber>;
  input2?: p.Flex<typeof AntdInput>;
  input3?: p.Flex<typeof AntdInput>;
  input4?: p.Flex<typeof AntdInput>;
  input5?: p.Flex<typeof AntdInput>;
  input6?: p.Flex<typeof AntdInput>;
  input7?: p.Flex<typeof AntdInput>;
  input8?: p.Flex<typeof AntdInput>;
  input9?: p.Flex<typeof AntdInput>;
};

export interface DefaultNewPatientProps {
  className?: string;
}

const $$ = {};

function PlasmicNewPatient__RenderFunc(props: {
  variants: PlasmicNewPatient__VariantsArgs;
  args: PlasmicNewPatient__ArgsType;
  overrides: PlasmicNewPatient__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "pageLayout.scannerstatus",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Ready \ud83d\udfe2"
      },
      {
        path: "pageLayout.user",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "GRAPE, GREG"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            onScannerstatusChange={p.generateStateOnChangeProp($state, [
              "pageLayout",
              "scannerstatus"
            ])}
            onUserChange={p.generateStateOnChangeProp($state, [
              "pageLayout",
              "user"
            ])}
            scannerstatus={p.generateStateValueProp($state, [
              "pageLayout",
              "scannerstatus"
            ])}
            user={p.generateStateValueProp($state, ["pageLayout", "user"])}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"New patient"}
                  </h1>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gLGqc
                    )}
                  >
                    {
                      "Enter patient identifiers. Must include at least 1 of NHI, Surname, DOB."
                    }
                  </div>
                  {(() => {
                    const child$Props = {
                      autoDisableWhileSubmitting: true,
                      className: classNames("__wab_instance", sty.form),
                      data: {
                        sourceId: "rp2KGdrnivkunXp7r598rC",
                        opId: "cb468405-56c5-4985-afa6-b8ac393eafd6",
                        userArgs: {},
                        cacheKey: `plasmic.$.${(() => {
                          try {
                            return "getSchema";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}.$.cb468405-56c5-4985-afa6-b8ac393eafd6.$.`,
                        invalidatedKeys: null,
                        roleId: null
                      },
                      dataFormItems: (() => {
                        const __composite = [
                          {
                            key: "__airtable_id",
                            inputType: "Text",
                            fieldId: "__airtable_id",
                            label: "Airtable ID",
                            name: "__airtable_id",
                            initialValue: "recY9rFZI3px35p90",
                            hidden: null
                          },
                          {
                            key: "patientid",
                            inputType: "Number",
                            fieldId: "patientid",
                            label: "patientid",
                            name: "patientid",
                            hidden: null
                          },
                          {
                            key: "Surname",
                            inputType: "Text",
                            fieldId: "Surname",
                            label: "Surname",
                            name: "Surname",
                            initialValue: null,
                            rules: null
                          },
                          {
                            key: "Firstname",
                            inputType: "Text",
                            fieldId: "Firstname",
                            label: "Firstname",
                            name: "Firstname",
                            initialValue: null
                          },
                          {
                            key: "healthsystemid",
                            inputType: "Text",
                            fieldId: "healthsystemid",
                            label: null,
                            name: "healthsystemid",
                            initialValue: null,
                            rules: null
                          },
                          {
                            key: "DOB",
                            inputType: null,
                            fieldId: "DOB",
                            label: "DOB",
                            name: "DOB",
                            initialValue: null
                          },
                          {
                            key: "addedby",
                            inputType: null,
                            fieldId: "addedby",
                            label: "addedby",
                            name: "addedby",
                            hidden: null
                          },
                          {
                            key: "Surname (from addedby)",
                            inputType: "Text",
                            fieldId: "Surname (from addedby)",
                            label: "Surname (from addedby)",
                            name: "Surname (from addedby)",
                            initialValue: null,
                            hidden: null
                          }
                        ];
                        __composite["0"]["hidden"] = true;
                        __composite["1"]["hidden"] = true;
                        __composite["2"]["initialValue"] = ``;
                        __composite["2"]["rules"] = [];
                        __composite["3"]["initialValue"] = ``;
                        __composite["4"]["label"] = "NHI";
                        __composite["4"]["initialValue"] = ``;
                        __composite["4"]["rules"] = [
                          { ruleType: "required", message: "Must have NHI" },

                          { ruleType: "required" }
                        ];

                        __composite["5"]["inputType"] = "DatePicker";
                        __composite["5"]["initialValue"] =
                          "2023-12-19T19:26:44.534Z";
                        __composite["6"]["inputType"] = "Number";
                        __composite["6"]["hidden"] = true;
                        __composite["7"]["initialValue"] = "GRAPE";
                        __composite["7"]["hidden"] = true;
                        return __composite;
                      })(),
                      extendedOnValuesChange:
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [],
                      labelCol: (() => {
                        const __composite = {
                          span: null,
                          horizontalOnly: null
                        };
                        __composite["span"] = 5;
                        __composite["horizontalOnly"] = false;
                        return __composite;
                      })(),
                      layout: "inline",
                      mode: "simplified",
                      onFinish: async values => {
                        const $steps = {};

                        $steps["defaultSubmit"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "rp2KGdrnivkunXp7r598rC",
                                  opId: "71bbcc01-7972-4e5b-87cd-3273ba94ce97",
                                  userArgs: {
                                    variables: [
                                      $state.form.value.Surname,
                                      $state.form.value.Firstname,
                                      $state.form.value.healthsystemid,
                                      $state.form.value.DOB
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["defaultSubmit"] != null &&
                          typeof $steps["defaultSubmit"] === "object" &&
                          typeof $steps["defaultSubmit"].then === "function"
                        ) {
                          $steps["defaultSubmit"] = await $steps[
                            "defaultSubmit"
                          ];
                        }

                        $steps["goToPatientlist"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/patientlist`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPatientlist"] != null &&
                          typeof $steps["goToPatientlist"] === "object" &&
                          typeof $steps["goToPatientlist"].then === "function"
                        ) {
                          $steps["goToPatientlist"] = await $steps[
                            "goToPatientlist"
                          ];
                        }
                      },
                      onFinishFailed: async data => {
                        const $steps = {};
                      },
                      onIsSubmittingChange:
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["form", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["form"] = ref;
                      },
                      submitSlot: (
                        <React.Fragment>
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__c7EG
                            )}
                            href={`/patientlist`}
                            onClick={async () => {
                              const $steps = {};

                              $steps["goToPatientlist"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/patientlist`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        location.assign(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToPatientlist"] != null &&
                                typeof $steps["goToPatientlist"] === "object" &&
                                typeof $steps["goToPatientlist"].then ===
                                  "function"
                              ) {
                                $steps["goToPatientlist"] = await $steps[
                                  "goToPatientlist"
                                ];
                              }
                            }}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rP9Ju
                              )}
                            >
                              {"Cancel"}
                            </div>
                          </AntdButton>
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__cntUj
                            )}
                            loading={false}
                            submitsForm={"boolean"}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zIkzP
                              )}
                            >
                              {"Add patient"}
                            </div>
                          </AntdButton>
                        </React.Fragment>
                      ),
                      validateTrigger: ["onSubmit"],
                      wrapperCol: (() => {
                        const __composite = {
                          span: null,
                          horizontalOnly: null
                        };
                        __composite["span"] = 8;
                        __composite["horizontalOnly"] = false;
                        return __composite;
                      })()
                    };
                    p.initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "form.isSubmitting"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"form"}
                        data-plasmic-override={overrides.form}
                        {...child$Props}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__elkux
                          )}
                          hidden={true}
                          initialValue={"recNPqporCdP2vAhv"}
                          label={"Airtable ID"}
                          name={"__airtable_id"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input"}
                                data-plasmic-override={overrides.input}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__bfOi
                          )}
                          hidden={true}
                          initialValue={2}
                          label={"patientid"}
                          name={"patientid"}
                        >
                          <AntdInputNumber
                            data-plasmic-name={"numberInput"}
                            data-plasmic-override={overrides.numberInput}
                            className={classNames(
                              "__wab_instance",
                              sty.numberInput
                            )}
                            onChange={p.generateStateOnChangeProp($state, [
                              "numberInput",
                              "value"
                            ])}
                            type={"number"}
                            value={p.generateStateValueProp($state, [
                              "numberInput",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__szKo5
                          )}
                          initialValue={"banana"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wuSCm
                              )}
                            >
                              {"Surname"}
                            </div>
                          }
                          name={"Surname"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input2
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input2", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input2",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input2.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input2"}
                                data-plasmic-override={overrides.input2}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__eGEsI
                          )}
                          initialValue={"bill"}
                          label={"First Name"}
                          name={"Firstname"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input3
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input3", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input3",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input3.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input3"}
                                data-plasmic-override={overrides.input3}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__r3U9W
                          )}
                          initialValue={"qwe1233"}
                          label={"NHI"}
                          name={"healthsystemid"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input4
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input4", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input4",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input4.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input4"}
                                data-plasmic-override={overrides.input4}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__efL
                          )}
                          initialValue={undefined}
                          label={"DOB"}
                          name={"DOB"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input5
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input5", "value"],
                                  AntdInput_Helpers
                                ),
                              size: "middle",
                              type: "date",
                              value: p.generateStateValueProp($state, [
                                "input5",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input5.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input5"}
                                data-plasmic-override={overrides.input5}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__wuBO
                          )}
                          hidden={true}
                          initialValue={undefined}
                          label={"Scans 2"}
                          name={"Scans 2"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input6
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input6", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input6",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input6.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input6"}
                                data-plasmic-override={overrides.input6}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__caVq
                          )}
                          hidden={true}
                          initialValue={["recdZnwMXw6PBLNkH"]}
                          label={"addedby"}
                          name={"addedby"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input7
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input7", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input7",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input7.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input7"}
                                data-plasmic-override={overrides.input7}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___5Pgqf
                          )}
                          initialValue={["Grape"]}
                          label={"Added by"}
                          name={"Surname (from addedby)"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input8
                              ),
                              disabled: true,
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input8", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input8",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input8.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input8"}
                                data-plasmic-override={overrides.input8}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__uKa9H
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mnDz1
                              )}
                            >
                              {"Label"}
                            </div>
                          }
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input9
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input9", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input9",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input9.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input9"}
                                data-plasmic-override={overrides.input9}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                      </FormWrapper>
                    );
                  })()}
                </div>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "freeBox",
    "h1",
    "form",
    "input",
    "numberInput",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9"
  ],
  pageLayout: [
    "pageLayout",
    "freeBox",
    "h1",
    "form",
    "input",
    "numberInput",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9"
  ],
  freeBox: [
    "freeBox",
    "h1",
    "form",
    "input",
    "numberInput",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9"
  ],
  h1: ["h1"],
  form: [
    "form",
    "input",
    "numberInput",
    "input2",
    "input3",
    "input4",
    "input5",
    "input6",
    "input7",
    "input8",
    "input9"
  ],
  input: ["input"],
  numberInput: ["numberInput"],
  input2: ["input2"],
  input3: ["input3"],
  input4: ["input4"],
  input5: ["input5"],
  input6: ["input6"],
  input7: ["input7"],
  input8: ["input8"],
  input9: ["input9"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  freeBox: "div";
  h1: "h1";
  form: typeof FormWrapper;
  input: typeof AntdInput;
  numberInput: typeof AntdInputNumber;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  input4: typeof AntdInput;
  input5: typeof AntdInput;
  input6: typeof AntdInput;
  input7: typeof AntdInput;
  input8: typeof AntdInput;
  input9: typeof AntdInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPatient__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPatient__VariantsArgs;
    args?: PlasmicNewPatient__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPatient__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPatient__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPatient__ArgProps,
          internalVariantPropNames: PlasmicNewPatient__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPatient__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPatient";
  } else {
    func.displayName = `PlasmicNewPatient.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"sKQ28BLFUJrwEqPEuPR1D8"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sKQ28BLFUJrwEqPEuPR1D8"
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewPatient = Object.assign(
  // Top-level PlasmicNewPatient renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    numberInput: makeNodeComponent("numberInput"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    input7: makeNodeComponent("input7"),
    input8: makeNodeComponent("input8"),
    input9: makeNodeComponent("input9"),

    // Metadata about props expected for PlasmicNewPatient
    internalVariantProps: PlasmicNewPatient__VariantProps,
    internalArgProps: PlasmicNewPatient__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPatient;
/* prettier-ignore-end */
