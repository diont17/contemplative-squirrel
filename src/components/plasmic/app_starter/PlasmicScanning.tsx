// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sKQ28BLFUJrwEqPEuPR1D8
// Component: hR61rKiItszW

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: gbLIUkABup4F/component
import { RichDetails } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-details";
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import { AntdSingleSlider } from "@plasmicpkgs/antd5/skinny/registerSlider";
import { AntdSliderMark } from "@plasmicpkgs/antd5/skinny/registerSlider";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: sKQ28BLFUJrwEqPEuPR1D8/projectcss
import sty from "./PlasmicScanning.module.css"; // plasmic-import: hR61rKiItszW/css

import image3HX594IKl9GzR from "./images/image3.png"; // plasmic-import: hX594iKL9gzR/picture

createPlasmicElementProxy;

export type PlasmicScanning__VariantMembers = {};
export type PlasmicScanning__VariantsArgs = {};
type VariantPropType = keyof PlasmicScanning__VariantsArgs;
export const PlasmicScanning__VariantProps = new Array<VariantPropType>();

export type PlasmicScanning__ArgsType = {};
type ArgPropType = keyof PlasmicScanning__ArgsType;
export const PlasmicScanning__ArgProps = new Array<ArgPropType>();

export type PlasmicScanning__OverridesType = {
  root?: p.Flex<"div">;
  pageLayout?: p.Flex<typeof PageLayout>;
  freeBox?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  dataDetails?: p.Flex<typeof RichDetails>;
  progress?: p.Flex<typeof AntdProgress>;
  slider?: p.Flex<typeof AntdSingleSlider>;
  sliderMark?: p.Flex<typeof AntdSliderMark>;
  img?: p.Flex<typeof p.PlasmicImg>;
  statusInfo2?: p.Flex<"div">;
  currentSnrSignalQuality9?: p.Flex<"div">;
  patientSar02WkgSim2?: p.Flex<"div">;
  button?: p.Flex<typeof AntdButton>;
  timer?: p.Flex<typeof Timer>;
};

export interface DefaultScanningProps {
  className?: string;
}

const $$ = {};

function PlasmicScanning__RenderFunc(props: {
  variants: PlasmicScanning__VariantsArgs;
  args: PlasmicScanning__ArgsType;
  overrides: PlasmicScanning__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "slider.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "progress",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "pageLayout.scannerstatus",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Ready \ud83d\udfe2"
      },
      {
        path: "pageLayout.user",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "GRAPE, GREG"
      },
      {
        path: "isScanning",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    scaninfo: usePlasmicDataOp(() => {
      return {
        sourceId: "rp2KGdrnivkunXp7r598rC",
        opId: "f1cc0d6c-bfc4-40cb-baf1-96f5b7d808ec",
        userArgs: {},
        cacheKey: `plasmic.$.f1cc0d6c-bfc4-40cb-baf1-96f5b7d808ec.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            onScannerstatusChange={p.generateStateOnChangeProp($state, [
              "pageLayout",
              "scannerstatus"
            ])}
            onUserChange={p.generateStateOnChangeProp($state, [
              "pageLayout",
              "user"
            ])}
            scannerstatus={p.generateStateValueProp($state, [
              "pageLayout",
              "scannerstatus"
            ])}
            user={p.generateStateValueProp($state, ["pageLayout", "user"])}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Scan in Progress"}
                    </h1>
                    <RichDetails
                      data-plasmic-name={"dataDetails"}
                      data-plasmic-override={overrides.dataDetails}
                      bordered={true}
                      className={classNames("__wab_instance", sty.dataDetails)}
                      data={(() => {
                        try {
                          return $queries.scaninfo;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      fields={(() => {
                        const __composite = [
                          {
                            key: "__airtable_id",
                            fieldId: "__airtable_id",
                            isHidden: null
                          },
                          {
                            key: "scanid",
                            fieldId: "scanid",
                            isHidden: null,
                            title: null
                          },
                          {
                            key: "protocol",
                            fieldId: "protocol",
                            isHidden: null,
                            title: null
                          },
                          {
                            key: "starttime",
                            fieldId: "starttime",
                            title: null
                          },
                          { key: "result", fieldId: "result", isHidden: null },
                          {
                            key: "patient",
                            fieldId: "patient",
                            isHidden: null
                          },
                          {
                            key: "Surname (from patient)",
                            fieldId: "Surname (from patient)",
                            title: null
                          },
                          { key: "users", fieldId: "users", isHidden: null },
                          {
                            key: "Surname (from users)",
                            fieldId: "Surname (from users)",
                            isHidden: null
                          },
                          {
                            key: "errorcode",
                            fieldId: "errorcode",
                            isHidden: null
                          },
                          {
                            key: "errormessage",
                            fieldId: "errormessage",
                            isHidden: null
                          }
                        ];
                        __composite["0"]["isHidden"] = true;
                        __composite["1"]["isHidden"] = false;
                        __composite["1"]["title"] = "Scan ID";
                        __composite["2"]["isHidden"] = false;
                        __composite["2"]["title"] = "Scan Protocol";
                        __composite["3"]["title"] = "Start Time";
                        __composite["4"]["isHidden"] = true;
                        __composite["5"]["isHidden"] = true;
                        __composite["6"]["title"] = "Patient ";
                        __composite["7"]["isHidden"] = true;
                        __composite["8"]["isHidden"] = true;
                        __composite["9"]["isHidden"] = true;
                        __composite["10"]["isHidden"] = true;
                        return __composite;
                      })()}
                      size={"small"}
                    />

                    <AntdProgress
                      data-plasmic-name={"progress"}
                      data-plasmic-override={overrides.progress}
                      className={classNames("__wab_instance", sty.progress)}
                      percent={(() => {
                        try {
                          return $state.progress;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 100;
                          }
                          throw e;
                        }
                      })()}
                      status={"normal"}
                      type={"line"}
                    />

                    <AntdSingleSlider
                      data-plasmic-name={"slider"}
                      data-plasmic-override={overrides.slider}
                      className={classNames("__wab_instance", sty.slider)}
                      defaultValue={0}
                      dots={false}
                      included={true}
                      keyboard={false}
                      onAfterChange={async value => {
                        const $steps = {};
                      }}
                      onChange={async (...eventArgs: any) => {
                        p.generateStateOnChangeProp($state, [
                          "slider",
                          "value"
                        ]).apply(null, eventArgs);
                        (async value => {
                          const $steps = {};

                          $steps["updateProgress"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["progress"]
                                  },
                                  operation: 0,
                                  value: $state.slider.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  p.set(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProgress"] != null &&
                            typeof $steps["updateProgress"] === "object" &&
                            typeof $steps["updateProgress"].then === "function"
                          ) {
                            $steps["updateProgress"] = await $steps[
                              "updateProgress"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      sliderScopeClassName={sty["slider__slider"]}
                      stylableMarks={
                        <AntdSliderMark
                          data-plasmic-name={"sliderMark"}
                          data-plasmic-override={overrides.sliderMark}
                          className={classNames(
                            "__wab_instance",
                            sty.sliderMark
                          )}
                          mark={50}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jXxVg
                            )}
                          >
                            {"Progress "}
                          </div>
                        </AntdSliderMark>
                      }
                      tooltipVisible={"unset"}
                      value={p.generateStateValueProp($state, [
                        "slider",
                        "value"
                      ])}
                      vertical={false}
                    />

                    <p.PlasmicImg
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: image3HX594IKl9GzR,
                        fullWidth: 1375,
                        fullHeight: 1130,
                        aspectRatio: undefined
                      }}
                    />

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"statusInfo2"}
                      data-plasmic-override={overrides.statusInfo2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.statusInfo2)}
                    >
                      <div
                        data-plasmic-name={"currentSnrSignalQuality9"}
                        data-plasmic-override={
                          overrides.currentSnrSignalQuality9
                        }
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.currentSnrSignalQuality9
                        )}
                      >
                        {"Current SNR/Signal quality:  8 "}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__flPcd
                        )}
                      >
                        {"Threshold SNR: 2"}
                      </div>
                      <div
                        data-plasmic-name={"patientSar02WkgSim2"}
                        data-plasmic-override={overrides.patientSar02WkgSim2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.patientSar02WkgSim2
                        )}
                      >
                        {"Patient SAR: 0.2 W/kg (sim)  \ud83d\udfe2"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fgeF1
                        )}
                      >
                        {"Device temperature: 23 C Normal"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ldauu
                        )}
                      >
                        {"Device connection: Good"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                  <AntdButton
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    danger={true}
                    onClick={async () => {
                      const $steps = {};

                      $steps["updateIsScanning"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["isScanning"]
                              },
                              operation: 4,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = p.get(objRoot, variablePath);
                              p.set(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateIsScanning"] != null &&
                        typeof $steps["updateIsScanning"] === "object" &&
                        typeof $steps["updateIsScanning"].then === "function"
                      ) {
                        $steps["updateIsScanning"] = await $steps[
                          "updateIsScanning"
                        ];
                      }

                      $steps["goToScanError"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/scan-error/${(() => {
                                try {
                                  return $queries.scaninfo.data[0].scanid;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToScanError"] != null &&
                        typeof $steps["goToScanError"] === "object" &&
                        typeof $steps["goToScanError"].then === "function"
                      ) {
                        $steps["goToScanError"] = await $steps["goToScanError"];
                      }
                    }}
                    size={"large"}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oNop
                      )}
                    >
                      {"Abort Scan"}
                    </div>
                  </AntdButton>
                  <Timer
                    data-plasmic-name={"timer"}
                    data-plasmic-override={overrides.timer}
                    className={classNames("__wab_instance", sty.timer)}
                    intervalSeconds={0.1}
                    isRunning={(() => {
                      try {
                        return $state.isScanning;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()}
                    onTick={async () => {
                      const $steps = {};

                      $steps["updateProgress"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["progress"]
                              },
                              operation: 2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = p.get(objRoot, variablePath);
                              p.set(objRoot, variablePath, oldValue + 1);
                              return oldValue + 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateProgress"] != null &&
                        typeof $steps["updateProgress"] === "object" &&
                        typeof $steps["updateProgress"].then === "function"
                      ) {
                        $steps["updateProgress"] = await $steps[
                          "updateProgress"
                        ];
                      }

                      $steps["goToViewScan"] =
                        $state.progress == 100
                          ? (() => {
                              const actionArgs = {
                                destination: `/view-scan/${(() => {
                                  try {
                                    return $queries.scaninfo.data[0].scanid;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToViewScan"] != null &&
                        typeof $steps["goToViewScan"] === "object" &&
                        typeof $steps["goToViewScan"].then === "function"
                      ) {
                        $steps["goToViewScan"] = await $steps["goToViewScan"];
                      }

                      $steps["updatePageLayoutScannerstatus"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pageLayout", "scannerstatus"]
                              },
                              operation: 0,
                              value: "Scanning 🟡"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              p.set(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePageLayoutScannerstatus"] != null &&
                        typeof $steps["updatePageLayoutScannerstatus"] ===
                          "object" &&
                        typeof $steps["updatePageLayoutScannerstatus"].then ===
                          "function"
                      ) {
                        $steps["updatePageLayoutScannerstatus"] = await $steps[
                          "updatePageLayoutScannerstatus"
                        ];
                      }
                    }}
                    runWhileEditing={false}
                  />
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "freeBox",
    "h1",
    "dataDetails",
    "progress",
    "slider",
    "sliderMark",
    "img",
    "statusInfo2",
    "currentSnrSignalQuality9",
    "patientSar02WkgSim2",
    "button",
    "timer"
  ],
  pageLayout: [
    "pageLayout",
    "freeBox",
    "h1",
    "dataDetails",
    "progress",
    "slider",
    "sliderMark",
    "img",
    "statusInfo2",
    "currentSnrSignalQuality9",
    "patientSar02WkgSim2",
    "button",
    "timer"
  ],
  freeBox: [
    "freeBox",
    "h1",
    "dataDetails",
    "progress",
    "slider",
    "sliderMark",
    "img",
    "statusInfo2",
    "currentSnrSignalQuality9",
    "patientSar02WkgSim2"
  ],
  h1: ["h1"],
  dataDetails: ["dataDetails"],
  progress: ["progress"],
  slider: ["slider", "sliderMark"],
  sliderMark: ["sliderMark"],
  img: ["img"],
  statusInfo2: [
    "statusInfo2",
    "currentSnrSignalQuality9",
    "patientSar02WkgSim2"
  ],
  currentSnrSignalQuality9: ["currentSnrSignalQuality9"],
  patientSar02WkgSim2: ["patientSar02WkgSim2"],
  button: ["button"],
  timer: ["timer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  freeBox: "div";
  h1: "h1";
  dataDetails: typeof RichDetails;
  progress: typeof AntdProgress;
  slider: typeof AntdSingleSlider;
  sliderMark: typeof AntdSliderMark;
  img: typeof p.PlasmicImg;
  statusInfo2: "div";
  currentSnrSignalQuality9: "div";
  patientSar02WkgSim2: "div";
  button: typeof AntdButton;
  timer: typeof Timer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicScanning__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicScanning__VariantsArgs;
    args?: PlasmicScanning__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicScanning__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicScanning__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicScanning__ArgProps,
          internalVariantPropNames: PlasmicScanning__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicScanning__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicScanning";
  } else {
    func.displayName = `PlasmicScanning.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"sKQ28BLFUJrwEqPEuPR1D8"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sKQ28BLFUJrwEqPEuPR1D8"
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicScanning = Object.assign(
  // Top-level PlasmicScanning renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    dataDetails: makeNodeComponent("dataDetails"),
    progress: makeNodeComponent("progress"),
    slider: makeNodeComponent("slider"),
    sliderMark: makeNodeComponent("sliderMark"),
    img: makeNodeComponent("img"),
    statusInfo2: makeNodeComponent("statusInfo2"),
    currentSnrSignalQuality9: makeNodeComponent("currentSnrSignalQuality9"),
    patientSar02WkgSim2: makeNodeComponent("patientSar02WkgSim2"),
    button: makeNodeComponent("button"),
    timer: makeNodeComponent("timer"),

    // Metadata about props expected for PlasmicScanning
    internalVariantProps: PlasmicScanning__VariantProps,
    internalArgProps: PlasmicScanning__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicScanning;
/* prettier-ignore-end */
