// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sKQ28BLFUJrwEqPEuPR1D8
// Component: 8BVcolD4ThVM

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: gbLIUkABup4F/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: sKQ28BLFUJrwEqPEuPR1D8/projectcss
import sty from "./PlasmicPatientdetails.module.css"; // plasmic-import: 8BVcolD4ThVM/css

createPlasmicElementProxy;

export type PlasmicPatientdetails__VariantMembers = {};
export type PlasmicPatientdetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicPatientdetails__VariantsArgs;
export const PlasmicPatientdetails__VariantProps = new Array<VariantPropType>();

export type PlasmicPatientdetails__ArgsType = {};
type ArgPropType = keyof PlasmicPatientdetails__ArgsType;
export const PlasmicPatientdetails__ArgProps = new Array<ArgPropType>();

export type PlasmicPatientdetails__OverridesType = {
  root?: p.Flex<"div">;
  pageLayout?: p.Flex<typeof PageLayout>;
  h1?: p.Flex<"h1">;
  form?: p.Flex<typeof FormWrapper>;
  input?: p.Flex<typeof AntdInput>;
  input2?: p.Flex<typeof AntdInput>;
  input3?: p.Flex<typeof AntdInput>;
  input4?: p.Flex<typeof AntdInput>;
  input5?: p.Flex<typeof AntdInput>;
  h2?: p.Flex<"h2">;
  table?: p.Flex<typeof RichTable>;
};

export interface DefaultPatientdetailsProps {
  className?: string;
}

const $$ = {};

function PlasmicPatientdetails__RenderFunc(props: {
  variants: PlasmicPatientdetails__VariantsArgs;
  args: PlasmicPatientdetails__ArgsType;
  overrides: PlasmicPatientdetails__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1",

        onMutate: p.generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec(
          "selectedRowKeys",
          RichTable_Helpers
        )
      },
      {
        path: "pageLayout.scannerstatus",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Ready \ud83d\udfe2"
      },
      {
        path: "pageLayout.user",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "GRAPE, GREG"
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    patient: usePlasmicDataOp(() => {
      return {
        sourceId: "rp2KGdrnivkunXp7r598rC",
        opId: "bf5eea1b-1347-4fba-b3db-28c594dfa02a",
        userArgs: {
          filters: [$ctx.params.patientid]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.bf5eea1b-1347-4fba-b3db-28c594dfa02a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    scans: usePlasmicDataOp(() => {
      return {
        sourceId: "rp2KGdrnivkunXp7r598rC",
        opId: "242ac687-595e-4d43-b0cb-3a70097538b4",
        userArgs: {
          filters: [$ctx.params.patientid]
        },
        cacheKey: `plasmic.$.242ac687-595e-4d43-b0cb-3a70097538b4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            onScannerstatusChange={p.generateStateOnChangeProp($state, [
              "pageLayout",
              "scannerstatus"
            ])}
            onUserChange={p.generateStateOnChangeProp($state, [
              "pageLayout",
              "user"
            ])}
            scannerstatus={p.generateStateValueProp($state, [
              "pageLayout",
              "scannerstatus"
            ])}
            user={p.generateStateValueProp($state, ["pageLayout", "user"])}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Patient details"}
                  </h1>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.form),
                      extendedOnValuesChange:
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],
                      initialValues: (() => {
                        try {
                          return $queries.patient.data[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      labelCol: (() => {
                        const __composite = {
                          span: null,
                          horizontalOnly: null
                        };
                        __composite["span"] = 5;
                        __composite["horizontalOnly"] = false;
                        return __composite;
                      })(),
                      layout: "inline",
                      mode: "advanced",
                      onFinish: async values => {
                        const $steps = {};

                        $steps["defaultSubmit"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "rp2KGdrnivkunXp7r598rC",
                                  opId: "1cee8400-7678-495a-99ac-aa57da2df4ee",
                                  userArgs: {
                                    variables: [
                                      $state.form.value.Surname,
                                      $state.form.value.Firstname,
                                      $state.form.value.healthsystemid,
                                      $state.form.value.DOB,
                                      $state.form.value.__airtable_id
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["defaultSubmit"] != null &&
                          typeof $steps["defaultSubmit"] === "object" &&
                          typeof $steps["defaultSubmit"].then === "function"
                        ) {
                          $steps["defaultSubmit"] = await $steps[
                            "defaultSubmit"
                          ];
                        }
                      },
                      onIsSubmittingChange:
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["form", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["form"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: (() => {
                        const __composite = {
                          span: null,
                          horizontalOnly: null
                        };
                        __composite["span"] = 8;
                        __composite["horizontalOnly"] = false;
                        return __composite;
                      })()
                    };
                    p.initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "form.isSubmitting"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"form"}
                        data-plasmic-override={overrides.form}
                        {...child$Props}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__jI8Be
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4Rvyo
                              )}
                            >
                              {"Surname"}
                            </div>
                          }
                          name={"Surname"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input"}
                                data-plasmic-override={overrides.input}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__xRFn
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ytnZy
                              )}
                            >
                              {"First name"}
                            </div>
                          }
                          name={"Firstname"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input2
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input2", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input2",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input2.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input2"}
                                data-plasmic-override={overrides.input2}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__pM3YS
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__k6BiC
                              )}
                            >
                              {"NHI"}
                            </div>
                          }
                          name={"healthsystemid"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input3
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input3", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input3",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input3.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input3"}
                                data-plasmic-override={overrides.input3}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__qmygg
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__unrd1
                              )}
                            >
                              {"DOB"}
                            </div>
                          }
                          name={"DOB"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input4
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input4", "value"],
                                  AntdInput_Helpers
                                ),
                              type: "date",
                              value: p.generateStateValueProp($state, [
                                "input4",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input4.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input4"}
                                data-plasmic-override={overrides.input4}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7AkRz
                          )}
                        >
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button___1I3W7
                            )}
                            href={`/patients/${(() => {
                              try {
                                return $state.form.value.patientid;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}`}
                            submitsForm={"boolean"}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___539Bv
                              )}
                            >
                              {"Update patient"}
                            </div>
                          </AntdButton>
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__mToq
                            )}
                            danger={true}
                            loading={false}
                            onClick={async () => {
                              const $steps = {};

                              $steps["airtableDeleteOne"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "rp2KGdrnivkunXp7r598rC",
                                        opId: "c4750499-824e-433f-949a-11c52f50d631",
                                        userArgs: {
                                          id: [$state.form.value.__airtable_id]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["airtableDeleteOne"] != null &&
                                typeof $steps["airtableDeleteOne"] ===
                                  "object" &&
                                typeof $steps["airtableDeleteOne"].then ===
                                  "function"
                              ) {
                                $steps["airtableDeleteOne"] = await $steps[
                                  "airtableDeleteOne"
                                ];
                              }

                              $steps["goToPatientlist"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/patientlist`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        location.assign(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToPatientlist"] != null &&
                                typeof $steps["goToPatientlist"] === "object" &&
                                typeof $steps["goToPatientlist"].then ===
                                  "function"
                              ) {
                                $steps["goToPatientlist"] = await $steps[
                                  "goToPatientlist"
                                ];
                              }
                            }}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6YQMl
                              )}
                            >
                              {"Delete Patient"}
                            </div>
                          </AntdButton>
                        </p.Stack>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__m1ErM
                          )}
                          hidden={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qBfjq
                              )}
                            >
                              {"Label"}
                            </div>
                          }
                          name={"__airtable_id"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input5
                              ),
                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input5", "value"],
                                  AntdInput_Helpers
                                ),
                              value: p.generateStateValueProp($state, [
                                "input5",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input5.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input5"}
                                data-plasmic-override={overrides.input5}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                      </FormWrapper>
                    );
                  })()}
                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2
                    )}
                  >
                    {"Scan history"}
                  </h2>
                  {(() => {
                    const child$Props = {
                      canSelectRows: "click",
                      className: classNames("__wab_instance", sty.table),
                      data: (() => {
                        try {
                          return $queries.scans;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      defaultSize: "small",
                      fields: (() => {
                        const __composite = [
                          {
                            key: "__airtable_id",
                            fieldId: "__airtable_id",
                            isHidden: null
                          },
                          { key: "protocol", fieldId: "protocol", title: null },
                          { key: "scanid", fieldId: "scanid", title: null },
                          {
                            key: "starttime",
                            fieldId: "starttime",
                            title: null,
                            dataType: null,
                            timeStyle: null,
                            hour12: null,
                            locale: null
                          },
                          {
                            key: "result",
                            fieldId: "result",
                            dataType: null,
                            title: null
                          },
                          {
                            key: "patient",
                            fieldId: "patient",
                            isHidden: null
                          },
                          {
                            key: "Surname (from patient)",
                            fieldId: "Surname (from patient)",
                            isHidden: null
                          },
                          { key: "users", fieldId: "users", isHidden: null },
                          {
                            key: "Surname (from users)",
                            fieldId: "Surname (from users)",
                            isHidden: null
                          },
                          {
                            key: "errorcode",
                            fieldId: "errorcode",
                            isHidden: null
                          },
                          {
                            key: "errormessage",
                            fieldId: "errormessage",
                            isHidden: null
                          },
                          { key: "snr", fieldId: "snr" }
                        ];
                        __composite["0"]["isHidden"] = true;
                        __composite["1"]["title"] = "Protocol";
                        __composite["2"]["title"] = "ScanID";
                        __composite["3"]["title"] = "Scan time";
                        __composite["3"]["dataType"] = "datetime";
                        __composite["3"]["timeStyle"] = "short";
                        __composite["3"]["hour12"] = false;
                        __composite["3"]["locale"] = "en-nz";
                        __composite["4"]["dataType"] = "string";
                        __composite["4"]["title"] = "Image";
                        __composite["5"]["isHidden"] = true;
                        __composite["6"]["isHidden"] = true;
                        __composite["7"]["isHidden"] = true;
                        __composite["8"]["isHidden"] = true;
                        __composite["9"]["isHidden"] = true;
                        __composite["10"]["isHidden"] = true;
                        return __composite;
                      })(),
                      hideColumnPicker: true,
                      hideDensity: true,
                      hideExports: true,
                      hideSearch: true,
                      onRowClick: async (rowKey, row, event) => {
                        const $steps = {};

                        $steps["goToViewScan"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/view-scan/${(() => {
                                  try {
                                    return $state.table.selectedRowKey;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToViewScan"] != null &&
                          typeof $steps["goToViewScan"] === "object" &&
                          typeof $steps["goToViewScan"].then === "function"
                        ) {
                          $steps["goToViewScan"] = await $steps["goToViewScan"];
                        }
                      },
                      onRowSelectionChanged: async (...eventArgs: any) => {
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKey",
                          ["table", "selectedRowKey"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRow",
                          ["table", "selectedRow"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRows",
                          ["table", "selectedRows"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        p.generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKeys",
                          ["table", "selectedRowKeys"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                      },
                      pagination: false,
                      rowActions: [],
                      rowKey: "scanid",
                      scopeClassName: sty["table__instance"],
                      selectedRowKey: p.generateStateValueProp($state, [
                        "table",
                        "selectedRowKey"
                      ]),
                      selectedRowKeys: p.generateStateValueProp($state, [
                        "table",
                        "selectedRowKeys"
                      ]),
                      themeResetClassName: classNames(
                        projectcss.root_reset,
                        projectcss.root_reset_tags,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )
                    };
                    p.initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "selectedRowKey",
                          plasmicStateName: "table.selectedRowKey"
                        },
                        {
                          name: "selectedRow",
                          plasmicStateName: "table.selectedRow"
                        },
                        {
                          name: "selectedRows",
                          plasmicStateName: "table.selectedRows"
                        },
                        {
                          name: "selectedRowKeys",
                          plasmicStateName: "table.selectedRowKeys"
                        }
                      ],
                      [],
                      RichTable_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <RichTable
                        data-plasmic-name={"table"}
                        data-plasmic-override={overrides.table}
                        {...child$Props}
                      />
                    );
                  })()}
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tR09Q)}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__ypVqk
                      )}
                      href={`/patientlist`}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__orZbG
                        )}
                      >
                        {"Back to list"}
                      </div>
                    </AntdButton>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xd6WO)}
                    />

                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__pRWgz
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["goToNewscan"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/newscan/${(() => {
                                  try {
                                    return $state.form.value.patientid;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToNewscan"] != null &&
                          typeof $steps["goToNewscan"] === "object" &&
                          typeof $steps["goToNewscan"].then === "function"
                        ) {
                          $steps["goToNewscan"] = await $steps["goToNewscan"];
                        }
                      }}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___77Uzz
                        )}
                      >
                        {"New Scan"}
                      </div>
                    </AntdButton>
                  </p.Stack>
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "h1",
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "input5",
    "h2",
    "table"
  ],
  pageLayout: [
    "pageLayout",
    "h1",
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "input5",
    "h2",
    "table"
  ],
  h1: ["h1"],
  form: ["form", "input", "input2", "input3", "input4", "input5"],
  input: ["input"],
  input2: ["input2"],
  input3: ["input3"],
  input4: ["input4"],
  input5: ["input5"],
  h2: ["h2"],
  table: ["table"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  h1: "h1";
  form: typeof FormWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  input4: typeof AntdInput;
  input5: typeof AntdInput;
  h2: "h2";
  table: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPatientdetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPatientdetails__VariantsArgs;
    args?: PlasmicPatientdetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPatientdetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPatientdetails__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPatientdetails__ArgProps,
          internalVariantPropNames: PlasmicPatientdetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPatientdetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPatientdetails";
  } else {
    func.displayName = `PlasmicPatientdetails.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"sKQ28BLFUJrwEqPEuPR1D8"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sKQ28BLFUJrwEqPEuPR1D8"
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPatientdetails = Object.assign(
  // Top-level PlasmicPatientdetails renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    h1: makeNodeComponent("h1"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    h2: makeNodeComponent("h2"),
    table: makeNodeComponent("table"),

    // Metadata about props expected for PlasmicPatientdetails
    internalVariantProps: PlasmicPatientdetails__VariantProps,
    internalArgProps: PlasmicPatientdetails__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPatientdetails;
/* prettier-ignore-end */
